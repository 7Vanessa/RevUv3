{"ast":null,"code":"'use strict';\n\nvar androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi'\n};\n\nfunction getAndroidAssetSuffix(scale) {\n  if (scale.toString() in androidScaleSuffix) {\n    return androidScaleSuffix[scale.toString()];\n  }\n\n  throw new Error('no such scale ' + scale.toString());\n}\n\nvar drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);\n\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n\n  var suffix = getAndroidAssetSuffix(scale);\n\n  if (!suffix) {\n    throw new Error(\"Don't know which android drawable suffix to use for scale: \" + scale + '\\nAsset: ' + JSON.stringify(asset, null, '\\t') + '\\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\\t'));\n  }\n\n  var androidFolder = 'drawable-' + suffix;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset) {\n  var folderPath = getBasePath(asset);\n  return (folderPath + '/' + asset.name).toLowerCase().replace(/\\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');\n}\n\nfunction getBasePath(asset) {\n  var basePath = asset.httpServerLocation;\n\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n\n  return basePath;\n}\n\nmodule.exports = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath\n};","map":{"version":3,"sources":["C:/Users/vmoha/Documents/EFREI/Semestre 5/Projetrevu/RevUv3/node_modules/react-native/Libraries/Image/assetPathUtils.js"],"names":["androidScaleSuffix","getAndroidAssetSuffix","scale","toString","Error","drawableFileTypes","Set","getAndroidResourceFolderName","asset","has","type","suffix","JSON","stringify","androidFolder","getAndroidResourceIdentifier","folderPath","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","substr","module","exports"],"mappings":"AAUA;;AAIA,IAAMA,kBAAkB,GAAG;AACzB,UAAQ,MADiB;AAEzB,OAAK,MAFoB;AAGzB,SAAO,MAHkB;AAIzB,OAAK,OAJoB;AAKzB,OAAK,QALoB;AAMzB,OAAK;AANoB,CAA3B;;AAaA,SAASC,qBAAT,CAA+BC,KAA/B,EAAsD;AACpD,MAAIA,KAAK,CAACC,QAAN,MAAoBH,kBAAxB,EAA4C;AAC1C,WAAOA,kBAAkB,CAACE,KAAK,CAACC,QAAN,EAAD,CAAzB;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,mBAAmBF,KAAK,CAACC,QAAN,EAA7B,CAAN;AACD;;AAGD,IAAME,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,KADgC,EAEhC,MAFgC,EAGhC,KAHgC,EAIhC,KAJgC,EAKhC,KALgC,EAMhC,MANgC,EAOhC,KAPgC,CAAR,CAA1B;;AAUA,SAASC,4BAAT,CACEC,KADF,EAEEN,KAFF,EAGqC;AACnC,MAAI,CAACG,iBAAiB,CAACI,GAAlB,CAAsBD,KAAK,CAACE,IAA5B,CAAL,EAAwC;AACtC,WAAO,KAAP;AACD;;AACD,MAAIC,MAAM,GAAGV,qBAAqB,CAACC,KAAD,CAAlC;;AACA,MAAI,CAACS,MAAL,EAAa;AACX,UAAM,IAAIP,KAAJ,CACJ,gEACEF,KADF,GAEE,WAFF,GAGEU,IAAI,CAACC,SAAL,CAAeL,KAAf,EAAsB,IAAtB,EAA4B,IAA5B,CAHF,GAIE,wBAJF,GAKEI,IAAI,CAACC,SAAL,CAAeb,kBAAf,EAAmC,IAAnC,EAAyC,IAAzC,CANE,CAAN;AAQD;;AACD,MAAMc,aAAa,GAAG,cAAcH,MAApC;AACA,SAAOG,aAAP;AACD;;AAED,SAASC,4BAAT,CAAsCP,KAAtC,EAAoE;AAClE,MAAIQ,UAAU,GAAGC,WAAW,CAACT,KAAD,CAA5B;AACA,SAAO,CAACQ,UAAU,GAAG,GAAb,GAAmBR,KAAK,CAACU,IAA1B,EACJC,WADI,GAEJC,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,eAHJ,EAGqB,EAHrB,EAIJA,OAJI,CAII,UAJJ,EAIgB,EAJhB,CAAP;AAKD;;AAED,SAASH,WAAT,CAAqBT,KAArB,EAAmD;AACjD,MAAIa,QAAQ,GAAGb,KAAK,CAACc,kBAArB;;AACA,MAAID,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AACvBA,IAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgB,CAAhB,CAAX;AACD;;AACD,SAAOF,QAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,qBAAqB,EAAEA,qBADR;AAEfM,EAAAA,4BAA4B,EAAEA,4BAFf;AAGfQ,EAAAA,4BAA4B,EAAEA,4BAHf;AAIfE,EAAAA,WAAW,EAAEA;AAJE,CAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {PackagerAsset} from './AssetRegistry';\r\n\r\nconst androidScaleSuffix = {\r\n  '0.75': 'ldpi',\r\n  '1': 'mdpi',\r\n  '1.5': 'hdpi',\r\n  '2': 'xhdpi',\r\n  '3': 'xxhdpi',\r\n  '4': 'xxxhdpi',\r\n};\r\n\r\n/**\r\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\r\n * floating point numbers imprecision.\r\n */\r\nfunction getAndroidAssetSuffix(scale: number): string {\r\n  if (scale.toString() in androidScaleSuffix) {\r\n    return androidScaleSuffix[scale.toString()];\r\n  }\r\n\r\n  throw new Error('no such scale ' + scale.toString());\r\n}\r\n\r\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\r\nconst drawableFileTypes = new Set([\r\n  'gif',\r\n  'jpeg',\r\n  'jpg',\r\n  'png',\r\n  'svg',\r\n  'webp',\r\n  'xml',\r\n]);\r\n\r\nfunction getAndroidResourceFolderName(\r\n  asset: PackagerAsset,\r\n  scale: number,\r\n): string | $TEMPORARY$string<'raw'> {\r\n  if (!drawableFileTypes.has(asset.type)) {\r\n    return 'raw';\r\n  }\r\n  var suffix = getAndroidAssetSuffix(scale);\r\n  if (!suffix) {\r\n    throw new Error(\r\n      \"Don't know which android drawable suffix to use for scale: \" +\r\n        scale +\r\n        '\\nAsset: ' +\r\n        JSON.stringify(asset, null, '\\t') +\r\n        '\\nPossible scales are:' +\r\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\r\n    );\r\n  }\r\n  const androidFolder = 'drawable-' + suffix;\r\n  return androidFolder;\r\n}\r\n\r\nfunction getAndroidResourceIdentifier(asset: PackagerAsset): string {\r\n  var folderPath = getBasePath(asset);\r\n  return (folderPath + '/' + asset.name)\r\n    .toLowerCase()\r\n    .replace(/\\//g, '_') // Encode folder structure in file name\r\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\r\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\r\n}\r\n\r\nfunction getBasePath(asset: PackagerAsset): string {\r\n  var basePath = asset.httpServerLocation;\r\n  if (basePath[0] === '/') {\r\n    basePath = basePath.substr(1);\r\n  }\r\n  return basePath;\r\n}\r\n\r\nmodule.exports = {\r\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\r\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\r\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\r\n  getBasePath: getBasePath,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}