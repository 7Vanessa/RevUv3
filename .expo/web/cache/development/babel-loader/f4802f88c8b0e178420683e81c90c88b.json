{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { randArray } from \"./utils\";\nexport var fetchQuestions = function fetchQuestions(amount, difficulty, category) {\n  var recuperation, data;\n  return _regeneratorRuntime.async(function fetchQuestions$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          recuperation = \"https://opentdb.com/api.php?amount=\" + amount + \"&category=\" + category + \"&difficulty=\" + difficulty + \"&type=multiple\";\n          _context.t0 = _regeneratorRuntime;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(recuperation));\n\n        case 4:\n          _context.t1 = _context.sent.json();\n          _context.next = 7;\n          return _context.t0.awrap.call(_context.t0, _context.t1);\n\n        case 7:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data.results.map(function (question) {\n            return _objectSpread(_objectSpread({}, question), {}, {\n              answers: randArray([].concat(_toConsumableArray(question.incorrect_answers), [question.correct_answer]))\n            });\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/vmoha/Documents/EFREI/Semestre 5/Projet Transverse/Rev-U/RevU/API.ts"],"names":["randArray","fetchQuestions","amount","difficulty","category","recuperation","fetch","json","data","results","map","question","answers","incorrect_answers","correct_answer"],"mappings":";;;;;;;;AAAA,SAAQA,SAAR;AAaA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,MAAP,EAAuBC,UAAvB,EAA2CC,QAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,UAAAA,YADoB,2CACiCH,MADjC,kBACoDE,QADpD,oBAC2ED,UAD3E;AAAA;AAAA;AAAA,2CAGAG,KAAK,CAACD,YAAD,CAHL;;AAAA;AAAA,sCAGqBE,IAHrB;AAAA;AAAA;;AAAA;AAGpBC,UAAAA,IAHoB;AAAA,2CAKnBA,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB,UAACC,QAAD;AAAA,mDAEbA,QAFa;AAGhBC,cAAAA,OAAO,EAAEZ,SAAS,8BAAKW,QAAQ,CAACE,iBAAd,IAAiCF,QAAQ,CAACG,cAA1C;AAHF;AAAA,WAAjB,CALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["import {randArray} from \"./utils\";\r\n\r\nexport type StateQuestion = Question & {answers: string[]}\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport const fetchQuestions = async (amount: number, difficulty: string, category: number) => {\r\n    const recuperation = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`;\r\n\r\n    const data = await (await fetch(recuperation)).json();\r\n\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: randArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ))\r\n}"]},"metadata":{},"sourceType":"module"}