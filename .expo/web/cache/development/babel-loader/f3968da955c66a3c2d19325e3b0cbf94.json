{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar PixelRatio = require(\"../Utilities/PixelRatio\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar assetPathUtils = require(\"./assetPathUtils\");\n\nvar invariant = require('invariant');\n\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\nfunction getAssetPathInDrawableFolder(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var drawbleFolder = assetPathUtils.getAndroidResourceFolderName(asset, scale);\n  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return !!this.serverUrl;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      if (this.isLoadedFromServer()) {\n        return this.assetServerURL();\n      }\n\n      if (Platform.OS === 'android') {\n        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();\n      } else {\n        return this.scaledAssetURLNearBundle();\n      }\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      invariant(!!this.serverUrl, 'need server to load from');\n      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n    }\n  }, {\n    key: \"scaledAssetPath\",\n    value: function scaledAssetPath() {\n      return this.fromSource(getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"scaledAssetURLNearBundle\",\n    value: function scaledAssetURLNearBundle() {\n      var path = this.jsbundleUrl || 'file://';\n      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'));\n    }\n  }, {\n    key: \"resourceIdentifierWithoutScale\",\n    value: function resourceIdentifierWithoutScale() {\n      invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));\n    }\n  }, {\n    key: \"drawableFolderInBundle\",\n    value: function drawableFolderInBundle() {\n      var path = this.jsbundleUrl || 'file://';\n      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return {\n        __packager_asset: true,\n        width: this.asset.width,\n        height: this.asset.height,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n\n  return AssetSourceResolver;\n}();\n\nmodule.exports = AssetSourceResolver;","map":{"version":3,"sources":["C:/Users/vmoha/Documents/EFREI/Semestre 5/Projetrevu/RevUv3/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidResourceFolderName","fileName","getAndroidResourceIdentifier","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","replace","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nexport type ResolvedAssetSource = {|\r\n  +__packager_asset: boolean,\r\n  +width: ?number,\r\n  +height: ?number,\r\n  +uri: string,\r\n  +scale: number,\r\n|};\r\n\r\nimport type {PackagerAsset} from './AssetRegistry';\r\n\r\nconst PixelRatio = require('../Utilities/PixelRatio');\r\nconst Platform = require('../Utilities/Platform');\r\n\r\nconst assetPathUtils = require('./assetPathUtils');\r\nconst invariant = require('invariant');\r\n\r\n/**\r\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\r\n */\r\nfunction getScaledAssetPath(asset): string {\r\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\r\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\r\n  const assetDir = assetPathUtils.getBasePath(asset);\r\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\r\n}\r\n\r\n/**\r\n * Returns a path like 'drawable-mdpi/icon.png'\r\n */\r\nfunction getAssetPathInDrawableFolder(asset): string {\r\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\r\n  const drawbleFolder = assetPathUtils.getAndroidResourceFolderName(\r\n    asset,\r\n    scale,\r\n  );\r\n  const fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\r\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\r\n}\r\n\r\nclass AssetSourceResolver {\r\n  serverUrl: ?string;\r\n  // where the jsbundle is being run from\r\n  jsbundleUrl: ?string;\r\n  // the asset to resolve\r\n  asset: PackagerAsset;\r\n\r\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\r\n    this.serverUrl = serverUrl;\r\n    this.jsbundleUrl = jsbundleUrl;\r\n    this.asset = asset;\r\n  }\r\n\r\n  isLoadedFromServer(): boolean {\r\n    return !!this.serverUrl;\r\n  }\r\n\r\n  isLoadedFromFileSystem(): boolean {\r\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\r\n  }\r\n\r\n  defaultAsset(): ResolvedAssetSource {\r\n    if (this.isLoadedFromServer()) {\r\n      return this.assetServerURL();\r\n    }\r\n\r\n    if (Platform.OS === 'android') {\r\n      return this.isLoadedFromFileSystem()\r\n        ? this.drawableFolderInBundle()\r\n        : this.resourceIdentifierWithoutScale();\r\n    } else {\r\n      return this.scaledAssetURLNearBundle();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an absolute URL which can be used to fetch the asset\r\n   * from the devserver\r\n   */\r\n  assetServerURL(): ResolvedAssetSource {\r\n    invariant(!!this.serverUrl, 'need server to load from');\r\n    return this.fromSource(\r\n      this.serverUrl +\r\n        getScaledAssetPath(this.asset) +\r\n        '?platform=' +\r\n        Platform.OS +\r\n        '&hash=' +\r\n        this.asset.hash,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Resolves to just the scaled asset filename\r\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\r\n   */\r\n  scaledAssetPath(): ResolvedAssetSource {\r\n    return this.fromSource(getScaledAssetPath(this.asset));\r\n  }\r\n\r\n  /**\r\n   * Resolves to where the bundle is running from, with a scaled asset filename\r\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\r\n   */\r\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\r\n    const path = this.jsbundleUrl || 'file://';\r\n    return this.fromSource(\r\n      // Assets can have relative paths outside of the project root.\r\n      // When bundling them we replace `../` with `_` to make sure they\r\n      // don't end up outside of the expected assets directory.\r\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The default location of assets bundled with the app, located by\r\n   * resource identifier\r\n   * The Android resource system picks the correct scale.\r\n   * E.g. 'assets_awesomemodule_icon'\r\n   */\r\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\r\n    invariant(\r\n      Platform.OS === 'android',\r\n      'resource identifiers work on Android',\r\n    );\r\n    return this.fromSource(\r\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the jsbundle is running from a sideload location, this resolves assets\r\n   * relative to its location\r\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\r\n   */\r\n  drawableFolderInBundle(): ResolvedAssetSource {\r\n    const path = this.jsbundleUrl || 'file://';\r\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\r\n  }\r\n\r\n  fromSource(source: string): ResolvedAssetSource {\r\n    return {\r\n      __packager_asset: true,\r\n      width: this.asset.width,\r\n      height: this.asset.height,\r\n      uri: source,\r\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\r\n    };\r\n  }\r\n\r\n  static pickScale(scales: Array<number>, deviceScale: number): number {\r\n    // Packager guarantees that `scales` array is sorted\r\n    for (let i = 0; i < scales.length; i++) {\r\n      if (scales[i] >= deviceScale) {\r\n        return scales[i];\r\n      }\r\n    }\r\n\r\n    // If nothing matches, device scale is larger than any available\r\n    // scales, so we return the biggest one. Unless the array is empty,\r\n    // in which case we default to 1\r\n    return scales[scales.length - 1] || 1;\r\n  }\r\n}\r\n\r\nmodule.exports = AssetSourceResolver;\r\n"]},"metadata":{},"sourceType":"script"}