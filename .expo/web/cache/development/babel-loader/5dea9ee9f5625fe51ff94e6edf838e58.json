{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\vmoha\\\\Documents\\\\EFREI\\\\Semestre 5\\\\Projet Transverse\\\\revuv3\\\\RevU_v2\\\\screens\\\\MathsGroupScreen.tsx\";\nimport React, { useState, useLayoutEffect, useCallback } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { collection, addDoc, orderBy, query, onSnapshot } from '@firebase/firestore';\nimport { auth, database } from \"../firebase\";\nexport default function MathsGroupScreen() {\n  var _auth$currentUser;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  useLayoutEffect(function () {\n    var collectionRef = collection(database, 'chats');\n    var q = query(collectionRef, orderBy('createdAt', 'desc'));\n    var unsubscribe = onSnapshot(q, function (querySnapshot) {\n      setMessages(querySnapshot.docs.map(function (doc) {\n        return {\n          _id: doc.data()._id,\n          createdAt: doc.data().createdAt.toDate(),\n          text: doc.data().text,\n          user: auth.current\n        };\n      }));\n    });\n    return unsubscribe;\n  });\n\n  var _onSend = useCallback(function () {\n    var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(function (previousMessages) {\n      return GiftedChat.append(previousMessages, messages);\n    });\n    var _messages$ = messages[0],\n        _id = _messages$._id,\n        createdAt = _messages$.createdAt,\n        text = _messages$.text,\n        user = _messages$.user;\n    addDoc(collection(database, 'chats'), {\n      _id: _id,\n      createdAt: createdAt,\n      text: text,\n      user: user\n    });\n  }, []);\n\n  return React.createElement(GiftedChat, {\n    messages: messages,\n    showAvatarForEveryMessage: true,\n    onSend: function onSend(messages) {\n      return _onSend(messages);\n    },\n    user: {\n      _id: auth == null ? void 0 : (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.email,\n      avatar: 'https://i.pravatar.cc/300'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 30\n  },\n  input: {\n    height: 50,\n    width: '100%',\n    borderWidth: 1,\n    padding: 15,\n    marginBottom: 20,\n    borderColor: 'gray'\n  }\n});","map":{"version":3,"sources":["C:/Users/vmoha/Documents/EFREI/Semestre 5/Projet Transverse/revuv3/RevU_v2/screens/MathsGroupScreen.tsx"],"names":["React","useState","useLayoutEffect","useCallback","GiftedChat","collection","addDoc","orderBy","query","onSnapshot","auth","database","MathsGroupScreen","messages","setMessages","collectionRef","q","unsubscribe","querySnapshot","docs","map","doc","_id","data","createdAt","toDate","text","user","current","onSend","previousMessages","append","currentUser","email","avatar","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","padding","input","height","width","borderWidth","marginBottom","borderColor"],"mappings":"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","sourcesContent":["import React, {\r\n    useState,\r\n    useEffect,\r\n    useLayoutEffect,\r\n    useCallback\r\n} from 'react';\r\nimport { TouchableOpacity, Text } from 'react-native';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport { collection, addDoc, orderBy, query, onSnapshot } from '@firebase/firestore';\r\n\r\nimport { auth, database } from '../firebase';\r\n\r\nexport default function MathsGroupScreen() {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useLayoutEffect(() => {\r\n        const collectionRef = collection(database, 'chats');\r\n        const q = query(collectionRef, orderBy('createdAt', 'desc'));\r\n\r\n        const unsubscribe = onSnapshot(q, querySnapshot => {\r\n            setMessages(\r\n                querySnapshot.docs.map(doc => ({\r\n                    _id: doc.data()._id,\r\n                    createdAt: doc.data().createdAt.toDate(),\r\n                    text: doc.data().text,\r\n                    user: auth.current\r\n                }))\r\n            );\r\n        });\r\n\r\n        return unsubscribe;\r\n    });\r\n\r\n\r\n    const onSend = useCallback((messages = []) => {\r\n        setMessages(previousMessages =>\r\n            GiftedChat.append(previousMessages, messages)\r\n        );\r\n        const { _id, createdAt, text, user } = messages[0];\r\n        addDoc(collection(database, 'chats'), {\r\n            _id,\r\n            createdAt,\r\n            text,\r\n            user\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <GiftedChat\r\n            messages={messages}\r\n            showAvatarForEveryMessage={true}\r\n            onSend={messages => onSend(messages)}\r\n            user={{\r\n                _id: auth?.currentUser?.email,\r\n                avatar: 'https://i.pravatar.cc/300'\r\n            }}/>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: 30,\r\n    },\r\n    input: {\r\n        height: 50,\r\n        width: '100%',\r\n        borderWidth: 1,\r\n        padding: 15,\r\n        marginBottom: 20,\r\n        borderColor: 'gray',\r\n    },\r\n})\r\n"]},"metadata":{},"sourceType":"module"}